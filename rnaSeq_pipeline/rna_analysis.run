#!/bin/bash  -e

cd $wkdir
if [ ! -s $sampleName ];then mkdir $sampleName;fi
cd $sampleName
processDay=`date +%Y%m%d`
oriFile=$input
if [ ! -s log ];then mkdir log; fi




#################### Section I #########################
## Aligning
if [ $startStep = "fastq" ];then
	echo -e  "[`date`]\\tStart alignment and sorting..."
	if [ $method = "star" ];then
		output=${sampleName}Aligned.sortedByCoord.out.bam
		if [ ! -s "$output" ];then
		$star  \
			--genomeDir $star_index_dir \
			--readFilesIn  ${read1}  ${read2} \
			--twopassMode Basic \
			--outReadsUnmapped None \
			--chimSegmentMin 12 \
			--chimJunctionOverhangMin 12  \
			--alignSJDBoverhangMin 10 \
			--alignMatesGapMax 200000 \
			--alignIntronMax 200000  \
			--chimSegmentReadGapMax parameter 3 \
			--alignSJstitchMismatchNmax 5 -1 5 5 \
			--runThreadN  $thread \
			--outFilterMultimapNmax 2 \
			--outFilterMismatchNoverLmax 0.04  \
			--outSAMtype BAM SortedByCoordinate \
			--outFileNamePrefix $sampleName  \
			--readFilesCommand zcat  > $PWD/log/${sampleName}_${processDay}_starAlign.log 2>&1  \
	 	|| (echo -e "ERROR occurred while aligning, please check $PWD/$PWD/log/${sampleName}_${processDay}_starAlign.log\\n";exit -1)
		else
		echo -e "\\t>>>>> $output <<<<< already existed, please delete it manually if you want to rerun with new parameters , else just ingore"
		fi
		input=${sampleName}Aligned.sortedByCoord.out.bam
	fi

	if [ $method = "tophat" ];then
		output="accepted_hits.bam"
		if [ ! -s "$output" ];then
		$tophat  \
			-p $thread  \
			--fusion-search \
			-o $sampleName \
			$tophat_index_dir \
			$read1 $read2  > $PWD/log/${sampleName}_${processDay}_tophatAlign.log 2>&1 \
		|| (echo -e "ERROR occurred while aligning, please check $PWD/log/${sampleName}_${processDay}_tophatAlign.log\\n";exit -1)
		else
		echo -e "\\t>>>>> $output <<<<< already existed, please delete it manually if you want to rerun with new parameters , else just ingore"
		fi
		input="accepted_hits.bam"
	fi

	echo -e "[`date`]\\tFinished alignment"
	startStep="arGrp"
fi
allDone fastq



#adding or replacing reads groups
if [ $startStep = "arGrp" ];then
	echo -e [`date`]\\tStart adding read groups...
	output=`basename $input .bam`.rg.bam

	if [ ! -s $output ];then
		$gatk AddOrReplaceReadGroups \
						 --INPUT "$input" \
						 --OUTPUT $output \
						 --TMP_DIR "$tmpDir" \
						 --SORT_ORDER coordinate \
						 --RGID "$sampleName" \
					 	 --RGLB "$library" \
					 	 --RGPL "$platform" \
					 	 --RGPU "$machine" \
					 	 --RGSM "$sampleID" \
						 --CREATE_INDEX  > "$PWD/log/${sampleName}_${processDay}_readgroup.log"  2>&1 \
						 || ( echo -e "ERROR occurred while adding group, please check $PWD/log/${sampleName}_${processDay}_readgroup.log\\n";exit -1)

	delFile
	echo -e [`date`]\\tFinished adding read groups!
	else
	echo -e "\\t >>>>> $output <<<<< already existed, please delete it manually if you want to rerun with new parameters , else just ingore"
	fi

	startStep="markDup"
	input=$output
fi
allDone arGrp


## mark duplication
if [ $startStep = "markDup" ];then
	echo -e [`date`]\\tStart marking duplicates...
	output=`basename $input .bam`.dedup.bam

	if [ ! -s $output ];then
		$gatk MarkDuplicates \
		  --INPUT "$input" \
			--OUTPUT "$output" \
			--TMP_DIR "$tmpDir" \
			--METRICS_FILE $sampleName.duplicates \
			--CREATE_INDEX > $PWD/log/${sampleName}_${processDay}_dedup.log 2>&1 \
			|| ( echo -e "ERROR occurred while marking duplication, please check $PWD/log/${sampleName}_${processDay}_dedup.log\\n";exit -1)

	delFile
	echo -e [`date`]\\tFinished mark duplication
	else
	echo -e "\\t>>>>> $output <<<<< already existed, please delete it manually if you want to rerun with new parameters , else just ingore"
	fi

	startStep="splitN"
	input=$output
fi
allDone markDup


# split N Cigar reads
if [ $startStep = "splitN" ];then
	echo -e [`date`]\\tStart splitNCigarReads...
	output=`basename $input .bam`.split.bam

	if [ ! -s $output ];then
		$gatk SplitNCigarReads \
		      -R $reference \
		      -I "$input" \
		      -O "$output"  \
					--tmp-dir $tmpDir > $PWD/log/${sampleName}_${processDay}_splitNCigarReads.log 2>&1 \
				|| ( echo -e "ERROR occurred while SplitNCigarReads, please check $PWD/log/${sampleName}_${processDay}_splitNCigarReads.log\\n";exit -1)

	delFile
	echo -e [`date`]\\tFinished splitting N Cigar Reads
	else
	echo -e "\\t>>>>> $output <<<<< already existed, please delete it manually if you want to rerun with new parameters , else just ingore"
	fi
	startStep="reCal"
	input=$output
fi
allDone splitN

# recalibration



	if [ $startStep = "reCal" ];then
         echo -e [`date`]\\tStart recalibrating base quality...
         report="$sampleName.recal_data.table"
	  	 	 output=`basename $input .bam`.recal.bam

	if [ ! -s $report ];then

		if [ $species == "human" ];then  # If other species, only dbsnp could be used as known-sites in the recalibration
			$gatk BaseRecalibrator \
				--input "$input" \
				--reference $reference \
				--known-sites $mill \
				--known-sites $g1000 \
				--known-sites $dbsnp \
				--output  $report \
				--tmp-dir $tmpDir > $PWD/log/${sampleName}_${processDay}_recal.log 2>&1 \
					|| ( echo -e "ERROR occurred while recalibrate , please check $PWD/log/${sampleName}_${processDay}_recal.log\\n";exit -1)
		else
			$gatk BaseRecalibrator \
				--input "$input" \
				--reference $reference \
				--known-sites $dbsnp \
				--output  $report \
				--tmp-dir $tmpDir > $PWD/log/${sampleName}_${processDay}_recal.log 2>&1 \
					|| ( echo -e "ERROR occurred while recalibrate , please check $PWD/log/${sampleName}_${processDay}_recal.log\\n";exit -1)
		fi

	else
		echo -e "\\t>>>>> $report <<<<< already existed, please delete it manually if you want to rerun with new parameters , else just ingore"
	fi

	echo -e [`date`]\\tFinished BQSR, start printing the reads...

	if [ ! -s $output ];then
		$gatk ApplyBQSR \
			 --reference $reference \
			 --input $input \
			 --bqsr-recal-file $report  \
			 --output $output \
			 --tmp-dir $tmpDir > $PWD/log/${sampleName}_${processDay}_applybqsr.log 2>&1 \
			 || ( echo -e "ERROR occurred while applying BQSR , please check $PWD/log/${sampleName}_${processDay}_applybqsr.log\\n";exit -1)

	echo -e [`date`]\\tFinished recalibration bam file
	delFile
	else
	echo -e "\\t>>>>> $output <<<<< already existed, please delete it manually if you want to rerun with new parameters , else just ingore"
	fi

	startStep="gVcf"
	input=$output
fi
allDone reCal

### call germline variants
if [ $startStep = "gVcf" ];then
	echo -e "[`date`]\\tStart calling germline variants with HaplotyperCaller..."
	output=$sampleName.g.vcf.gz

	if [ ! -s $output ];then
	 $gatk  HaplotypeCaller \
		--reference $reference \
		--input $input \
    -ERC GVCF \
		--output $output \
		--tmp-dir $tmpDir \
		--native-pair-hmm-threads $thread >log/${sampleName}_${processDay}_HaplotyperCaller.log 2>&1 \
		|| ( echo -e "ERROR occurred while call variants, please check $PWD/log/${sampleName}_${processDay}__HaplotyperCaller.log\\n";exit -1)

	   echo -e "[`date`]\\tVariants calling has been completed..."
	else
	echo -e "\\t>>>>> $sampleName.g.vcf.gz <<<<< already existed, please delete it manually if you want to rerun with new parameters , else just ingore"
	fi

	echo -e "[`date`]\\tFinished germline variants calling, please combind gvcfs for jointly calling :\\tgatk CombineGVCFs  -R reference.fasta --variant sample1.g.vcf.gz --variant sample2.g.vcf.gz -O cohort.g.vcf.gz"
fi
exit 0


#########################################################
#################### Section II #########################

###jointly calling
if [ $startStep = "jCall" ];then
		echo -e "[`date`]\\tStart jointly calling variants..."
		output=`basename $input .vcf.gz`.jointlyCall.vcf.gz
  if [ ! -s $output ];then
	  $gatk GenotypeGVCFs \
	     -R $reference \
       -V "$input" \
       -O "$output"  \
			 --tmp-dir "$tmpDir"  >log/${sampleName}_${processDay}_jointlyCalling.log 2>&1 \
	 		|| ( echo -e "ERROR occurred while call variants, please check $PWD/log/${sampleName}_${processDay}_jointlyCalling.log\\n";exit -1)

     echo -e "[`date`]\\tJointly calling has been completed!"
	else
			echo -e "\\t>>>>> $output <<<<< already existed, please delete it manually if you want to rerun with new parameters , else just ingore"
	fi
	startStep="varFilt"
	input=$output
fi
allDone  jCall


### filter variants
if [ $startStep = "varFilt" ];then
		echo -e "[`date`]\\tStart filtering variants..."
    output=`basename $input .vcf.gz`.filtered.vcf.gz
  if [ ! -s $output ];then
		$gatk VariantFiltration \
		 -R $reference \
		 -V $input \
		 -O $output \
		 -window 35 \
		 -cluster 3 \
		 -filter "FS > 30" \
     --filter-name "FS30" \
 		 -filter "QD < 2" \
		 --filter-name "QD2" \
 		 -filter "DP < 8" \
		 --filter-name "DP8" \
 		 -filter "MQ < 60" \
		 --filter-name "MQ60" \
		 --tmp-dir "$tmpDir"  >log/${sampleName}_${processDay}_variantFiltration.log 2>&1 \
 		 || ( echo -e "ERROR occurred while filtering variants, please check $PWD/log/${sampleName}_${processDay}_variantFiltration.log\\n";exit -1)

     echo -e "[`date`]\\tVariants filteration has been completed!"
	else
			echo -e "\\t>>>>> $output <<<<< already existed, please delete it manually if you want to rerun with new parameters , else just ingore"
	fi

	input=$output
	startStep="varRecal"
fi
allDone varFilt



### recalibrate variants
if [ $startStep = "varRecal" ];then
		echo -e "[`date`]\\tStart recalibrating variants..."
    output=`basename $input .vcf.gz`.reCal.vcf.gz

  if [ ! -s $output ];then

			     if [ ! -s "$sampleName.recal" ]||[ ! -s "$sampleName.tranches" ];then
								 if [ $species == "human" ];then  # If other species, only dbsnp could be used as known-sites in the recalibration
										    gatk VariantRecalibrator \
													-R $reference \
										      -V "$input" \
										      --resource hapmap,known=false,training=true,truth=true,prior=15.0:$hapmap \
										      --resource omni,known=false,training=true,truth=false,prior=12.0:$omni \
										      --resource 1000G,known=false,training=true,truth=false,prior=10.0:$g1000hc \
										      --resource dbsnp,known=true,training=false,truth=false,prior=7.0:$dbsnp \
										      -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
										      -mode SNP \
													-O $sampleName.recal \
										   		--tranches-file $sampleName.tranches \
										   		--rscript-file  $sampleName.plots.R  \
													--tmp-dir "$tmpDir"   >log/${sampleName}_${processDay}_variantRecalibrator.log 2>&1 \
										  		 || ( echo -e "ERROR occurred while recalibrate variants, please check $PWD/log/${sampleName}_${processDay}_variantRecalibrator.log\\n";exit -1)

								else
									gatk VariantRecalibrator \
										-R $reference \
										-V "$input" \
										--resource dbsnp,known=true,training=false,truth=false,prior=7.0:$dbsnp \
										-an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
										-mode SNP \
										-O $sampleName.recal \
										--tranches-file $sampleName.tranches \
										--rscript-file  $sampleName.plots.R  \
										--tmp-dir "$tmpDir"   >log/${sampleName}_${processDay}_variantRecalibrator.log 2>&1 \
										 || ( echo -e "ERROR occurred while recalibrate variants, please check $PWD/log/${sampleName}_${processDay}_variantRecalibrator.log\\n";exit -1)
								fi
							  echo -e "[`date`]\\tVariants recalibration has been completed!"
					  else
			 			echo -e "\\t>>>>> $sampleName.recal AND $sampleName.tranches <<<<< already existed, please delete it manually if you want to rerun with new parameters , else just ingore"


		 echo -e "[`date`]\\Start apply VQSR..."
		 $gatk ApplyVQSR \
				    -R $reference \
				    -V "$input" \
				    -O "$output" \
				    --truth-sensitivity-filter-level 99.0 \
				    --tranches-file $sampleName.tranches \
				    --recal-file $sampleName.recal \
				    -mode SNP \
						--tmp-dir "$tmpDir"  >log/${sampleName}_${processDay}_applyVQSR.log 2>&1 \
			  		 || ( echo -e "ERROR occurred while recalibrate variants, please check $PWD/log/${sampleName}_${processDay}_applyVQSR.log\\n";exit -1)
		 echo -e "[`date`]\\Applying VQSR has been completed!"
 else
     echo -e "\\t>>>>> $output <<<<< already existed, please delete it manually if you want to rerun with new parameters , else just ingore"
 fi

 	input=$output
 	startStep="anno"
fi
allDone varRecal


### annotating variants
if [ $startStep = "anno" ];then
	echo -e "[`date`]\\tStart annotation with annovar..."

	if [ ! -s annotation ];then mkdir annotation;fi

	if [ ! -s annotation/$sampleName.hg19_multianno.txt ];then
		$table_annovar $input  $annovar_database \
			-buildver hg19  \
			-out annotation/$sampleName \
			-protocol refGene,genomicSuperDups,1000g2014oct_all,1000g2014oct_afr,1000g2014oct_eas,1000g2014oct_eur,avsnp142,ljb26_all \
			-operation g,r,f,f,f,f,f,f  \
			-vcfinput \
			-remove  2>&1  >log/${sampleName}_${processDay}_annotation.log 2>&1 \
		|| ( echo -e "ERROR occurred while annotation, please check $PWD/log/${sampleName}_${processDay}_annotation.log\\n";exit -1)

	echo -e "[`date`]\\tVariants annnotation  has been completed!"
	else
	echo -e "\\t>>>>> $sampleName.hg19_multianno.txt <<<<< already existed, please delete it manually if you want to rerun with new parameters , else just ingore"
	fi
fi
allDone anno
